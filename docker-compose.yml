services:
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    image: rugradar-backend
    container_name: rugradar-backend
    env_file:
      - ./.env
    ports:
      - "8000:8000"
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 20s
    networks:
      - app-net

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    image: rugradar-frontend
    container_name: rugradar-frontend
    env_file:
      - ./.env
    ports:
      - "3000:80"
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - app-net

  db:
    image: postgres:15-alpine
    container_name: rugradar-db
    env_file:
      - ./.env.db
    ports:
      - "5432:5432"
    restart: unless-stopped
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - app-net

networks:
  app-net:
    driver: bridge

volumes:
  db_data:
